public func flipCurry<A, B>(_ function: @escaping (A) -> B) -> (A) -> B {
    return { (a: A) -> B in function(a) }
}

public func flipCurry<A, B, C>(_ function: @escaping (A, B) -> C) -> (B) -> (A) -> C {
    return { (b: B) -> (A) -> C in { (a: A) -> C in function(a, b) } }
}

public func flipCurry<A, B, C, D>(_ function: @escaping (A, B, C) -> D) -> (C) -> (B) -> (A) -> D {
    return { (c: C) -> (B) -> (A) -> D in { (b: B) -> (A) -> D in { (a: A) -> D in function(a, b, c) } } }
}

public func flipCurry<A, B, C, D, E>(_ function: @escaping (A, B, C, D) -> E) -> (D) -> (C) -> (B) -> (A) -> E {
    return { (d: D) -> (C) -> (B) -> (A) -> E in { (c: C) -> (B) -> (A) -> E in { (b: B) -> (A) -> E in { (a: A) -> E in function(a, b, c, d) } } } }
}

public func flipCurry<A, B, C, D, E, F>(_ function: @escaping (A, B, C, D, E) -> F) -> (E) -> (D) -> (C) -> (B) -> (A) -> F {
    return { (e: E) -> (D) -> (C) -> (B) -> (A) -> F in { (d: D) -> (C) -> (B) -> (A) -> F in { (c: C) -> (B) -> (A) -> F in { (b: B) -> (A) -> F in { (a: A) -> F in function(a, b, c, d, e) } } } } }
}

public func flipCurry<A, B, C, D, E, F, G>(_ function: @escaping (A, B, C, D, E, F) -> G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> G {
    return { (f: F) -> (E) -> (D) -> (C) -> (B) -> (A) -> G in { (e: E) -> (D) -> (C) -> (B) -> (A) -> G in { (d: D) -> (C) -> (B) -> (A) -> G in { (c: C) -> (B) -> (A) -> G in { (b: B) -> (A) -> G in { (a: A) -> G in function(a, b, c, d, e, f) } } } } } }
}

public func flipCurry<A, B, C, D, E, F, G, H>(_ function: @escaping (A, B, C, D, E, F, G) -> H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> H {
    return { (g: G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> H in { (f: F) -> (E) -> (D) -> (C) -> (B) -> (A) -> H in { (e: E) -> (D) -> (C) -> (B) -> (A) -> H in { (d: D) -> (C) -> (B) -> (A) -> H in { (c: C) -> (B) -> (A) -> H in { (b: B) -> (A) -> H in { (a: A) -> H in function(a, b, c, d, e, f, g) } } } } } } }
}

public func flipCurry<A, B, C, D, E, F, G, H, I>(_ function: @escaping (A, B, C, D, E, F, G, H) -> I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> I {
    return { (h: H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> I in { (g: G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> I in { (f: F) -> (E) -> (D) -> (C) -> (B) -> (A) -> I in { (e: E) -> (D) -> (C) -> (B) -> (A) -> I in { (d: D) -> (C) -> (B) -> (A) -> I in { (c: C) -> (B) -> (A) -> I in { (b: B) -> (A) -> I in { (a: A) -> I in function(a, b, c, d, e, f, g, h) } } } } } } } }
}

public func flipCurry<A, B, C, D, E, F, G, H, I, J>(_ function: @escaping (A, B, C, D, E, F, G, H, I) -> J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> J {
    return { (i: I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> J in { (h: H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> J in { (g: G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> J in { (f: F) -> (E) -> (D) -> (C) -> (B) -> (A) -> J in { (e: E) -> (D) -> (C) -> (B) -> (A) -> J in { (d: D) -> (C) -> (B) -> (A) -> J in { (c: C) -> (B) -> (A) -> J in { (b: B) -> (A) -> J in { (a: A) -> J in function(a, b, c, d, e, f, g, h, i) } } } } } } } } }
}

public func flipCurry<A, B, C, D, E, F, G, H, I, J, K>(_ function: @escaping (A, B, C, D, E, F, G, H, I, J) -> K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> K {
    return { (j: J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> K in { (i: I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> K in { (h: H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> K in { (g: G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> K in { (f: F) -> (E) -> (D) -> (C) -> (B) -> (A) -> K in { (e: E) -> (D) -> (C) -> (B) -> (A) -> K in { (d: D) -> (C) -> (B) -> (A) -> K in { (c: C) -> (B) -> (A) -> K in { (b: B) -> (A) -> K in { (a: A) -> K in function(a, b, c, d, e, f, g, h, i, j) } } } } } } } } } }
}

public func flipCurry<A, B, C, D, E, F, G, H, I, J, K, L>(_ function: @escaping (A, B, C, D, E, F, G, H, I, J, K) -> L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> L {
    return { (k: K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> L in { (j: J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> L in { (i: I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> L in { (h: H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> L in { (g: G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> L in { (f: F) -> (E) -> (D) -> (C) -> (B) -> (A) -> L in { (e: E) -> (D) -> (C) -> (B) -> (A) -> L in { (d: D) -> (C) -> (B) -> (A) -> L in { (c: C) -> (B) -> (A) -> L in { (b: B) -> (A) -> L in { (a: A) -> L in function(a, b, c, d, e, f, g, h, i, j, k) } } } } } } } } } } }
}

public func flipCurry<A, B, C, D, E, F, G, H, I, J, K, L, M>(_ function: @escaping (A, B, C, D, E, F, G, H, I, J, K, L) -> M) -> (L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> M {
    return { (l: L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> M in { (k: K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> M in { (j: J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> M in { (i: I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> M in { (h: H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> M in { (g: G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> M in { (f: F) -> (E) -> (D) -> (C) -> (B) -> (A) -> M in { (e: E) -> (D) -> (C) -> (B) -> (A) -> M in { (d: D) -> (C) -> (B) -> (A) -> M in { (c: C) -> (B) -> (A) -> M in { (b: B) -> (A) -> M in { (a: A) -> M in function(a, b, c, d, e, f, g, h, i, j, k, l) } } } } } } } } } } } }
}

public func flipCurry<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(_ function: @escaping (A, B, C, D, E, F, G, H, I, J, K, L, M) -> N) -> (M) -> (L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> N {
    return { (m: M) -> (L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> N in { (l: L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> N in { (k: K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> N in { (j: J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> N in { (i: I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> N in { (h: H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> N in { (g: G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> N in { (f: F) -> (E) -> (D) -> (C) -> (B) -> (A) -> N in { (e: E) -> (D) -> (C) -> (B) -> (A) -> N in { (d: D) -> (C) -> (B) -> (A) -> N in { (c: C) -> (B) -> (A) -> N in { (b: B) -> (A) -> N in { (a: A) -> N in function(a, b, c, d, e, f, g, h, i, j, k, l, m) } } } } } } } } } } } } }
}

public func flipCurry<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(_ function: @escaping (A, B, C, D, E, F, G, H, I, J, K, L, M, N) -> O) -> (N) -> (M) -> (L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> O {
    return { (n: N) -> (M) -> (L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> O in { (m: M) -> (L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> O in { (l: L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> O in { (k: K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> O in { (j: J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> O in { (i: I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> O in { (h: H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> O in { (g: G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> O in { (f: F) -> (E) -> (D) -> (C) -> (B) -> (A) -> O in { (e: E) -> (D) -> (C) -> (B) -> (A) -> O in { (d: D) -> (C) -> (B) -> (A) -> O in { (c: C) -> (B) -> (A) -> O in { (b: B) -> (A) -> O in { (a: A) -> O in function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) } } } } } } } } } } } } } }
}

public func flipCurry<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(_ function: @escaping (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O) -> P) -> (O) -> (N) -> (M) -> (L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> P {
    return { (o: O) -> (N) -> (M) -> (L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> P in { (n: N) -> (M) -> (L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> P in { (m: M) -> (L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> P in { (l: L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> P in { (k: K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> P in { (j: J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> P in { (i: I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> P in { (h: H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> P in { (g: G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> P in { (f: F) -> (E) -> (D) -> (C) -> (B) -> (A) -> P in { (e: E) -> (D) -> (C) -> (B) -> (A) -> P in { (d: D) -> (C) -> (B) -> (A) -> P in { (c: C) -> (B) -> (A) -> P in { (b: B) -> (A) -> P in { (a: A) -> P in function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) } } } } } } } } } } } } } } }
}

public func flipCurry<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(_ function: @escaping (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P) -> Q) -> (P) -> (O) -> (N) -> (M) -> (L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> Q {
    return { (p: P) -> (O) -> (N) -> (M) -> (L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> Q in { (o: O) -> (N) -> (M) -> (L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> Q in { (n: N) -> (M) -> (L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> Q in { (m: M) -> (L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> Q in { (l: L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> Q in { (k: K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> Q in { (j: J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> Q in { (i: I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> Q in { (h: H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> Q in { (g: G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> Q in { (f: F) -> (E) -> (D) -> (C) -> (B) -> (A) -> Q in { (e: E) -> (D) -> (C) -> (B) -> (A) -> Q in { (d: D) -> (C) -> (B) -> (A) -> Q in { (c: C) -> (B) -> (A) -> Q in { (b: B) -> (A) -> Q in { (a: A) -> Q in function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) } } } } } } } } } } } } } } } }
}

public func flipCurry<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R>(_ function: @escaping (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q) -> R) -> (Q) -> (P) -> (O) -> (N) -> (M) -> (L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> R {
    return { (q: Q) -> (P) -> (O) -> (N) -> (M) -> (L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> R in { (p: P) -> (O) -> (N) -> (M) -> (L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> R in { (o: O) -> (N) -> (M) -> (L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> R in { (n: N) -> (M) -> (L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> R in { (m: M) -> (L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> R in { (l: L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> R in { (k: K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> R in { (j: J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> R in { (i: I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> R in { (h: H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> R in { (g: G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> R in { (f: F) -> (E) -> (D) -> (C) -> (B) -> (A) -> R in { (e: E) -> (D) -> (C) -> (B) -> (A) -> R in { (d: D) -> (C) -> (B) -> (A) -> R in { (c: C) -> (B) -> (A) -> R in { (b: B) -> (A) -> R in { (a: A) -> R in function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) } } } } } } } } } } } } } } } } }
}

public func flipCurry<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S>(_ function: @escaping (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R) -> S) -> (R) -> (Q) -> (P) -> (O) -> (N) -> (M) -> (L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> S {
    return { (r: R) -> (Q) -> (P) -> (O) -> (N) -> (M) -> (L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> S in { (q: Q) -> (P) -> (O) -> (N) -> (M) -> (L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> S in { (p: P) -> (O) -> (N) -> (M) -> (L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> S in { (o: O) -> (N) -> (M) -> (L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> S in { (n: N) -> (M) -> (L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> S in { (m: M) -> (L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> S in { (l: L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> S in { (k: K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> S in { (j: J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> S in { (i: I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> S in { (h: H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> S in { (g: G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> S in { (f: F) -> (E) -> (D) -> (C) -> (B) -> (A) -> S in { (e: E) -> (D) -> (C) -> (B) -> (A) -> S in { (d: D) -> (C) -> (B) -> (A) -> S in { (c: C) -> (B) -> (A) -> S in { (b: B) -> (A) -> S in { (a: A) -> S in function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) } } } } } } } } } } } } } } } } } }
}

public func flipCurry<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T>(_ function: @escaping (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S) -> T) -> (S) -> (R) -> (Q) -> (P) -> (O) -> (N) -> (M) -> (L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> T {
    return { (s: S) -> (R) -> (Q) -> (P) -> (O) -> (N) -> (M) -> (L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> T in { (r: R) -> (Q) -> (P) -> (O) -> (N) -> (M) -> (L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> T in { (q: Q) -> (P) -> (O) -> (N) -> (M) -> (L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> T in { (p: P) -> (O) -> (N) -> (M) -> (L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> T in { (o: O) -> (N) -> (M) -> (L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> T in { (n: N) -> (M) -> (L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> T in { (m: M) -> (L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> T in { (l: L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> T in { (k: K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> T in { (j: J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> T in { (i: I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> T in { (h: H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> T in { (g: G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> T in { (f: F) -> (E) -> (D) -> (C) -> (B) -> (A) -> T in { (e: E) -> (D) -> (C) -> (B) -> (A) -> T in { (d: D) -> (C) -> (B) -> (A) -> T in { (c: C) -> (B) -> (A) -> T in { (b: B) -> (A) -> T in { (a: A) -> T in function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) } } } } } } } } } } } } } } } } } } }
}

public func flipCurry<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U>(_ function: @escaping (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T) -> U) -> (T) -> (S) -> (R) -> (Q) -> (P) -> (O) -> (N) -> (M) -> (L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> U {
    return { (t: T) -> (S) -> (R) -> (Q) -> (P) -> (O) -> (N) -> (M) -> (L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> U in { (s: S) -> (R) -> (Q) -> (P) -> (O) -> (N) -> (M) -> (L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> U in { (r: R) -> (Q) -> (P) -> (O) -> (N) -> (M) -> (L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> U in { (q: Q) -> (P) -> (O) -> (N) -> (M) -> (L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> U in { (p: P) -> (O) -> (N) -> (M) -> (L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> U in { (o: O) -> (N) -> (M) -> (L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> U in { (n: N) -> (M) -> (L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> U in { (m: M) -> (L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> U in { (l: L) -> (K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> U in { (k: K) -> (J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> U in { (j: J) -> (I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> U in { (i: I) -> (H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> U in { (h: H) -> (G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> U in { (g: G) -> (F) -> (E) -> (D) -> (C) -> (B) -> (A) -> U in { (f: F) -> (E) -> (D) -> (C) -> (B) -> (A) -> U in { (e: E) -> (D) -> (C) -> (B) -> (A) -> U in { (d: D) -> (C) -> (B) -> (A) -> U in { (c: C) -> (B) -> (A) -> U in { (b: B) -> (A) -> U in { (a: A) -> U in function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) } } } } } } } } } } } } } } } } } } } }
}
